{"ast":null,"code":"import axios from 'axios';\nimport * as actionTypes from './actionTypes';\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = token => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logOut = () => {\n  localStorage.removeItem('user');\n  localStorage.removeItem('expirationDate');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeOut = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logOut());\n    }, expirationTime * 1000);\n  };\n};\nexport const authLogin = (username, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios.post('http://127.0.0.1:8000/rest-auth/login/', {\n      username: username,\n      password: password\n    }).then(res => {\n      const token = res.data.key;\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('token', token);\n      localStorage.setItem('expirationDate', expirationDate);\n      dispatch(authSuccess());\n      dispatch(checkAuthTimeOut(3600));\n    }).catch(err => {\n      dispatch(authFail(err));\n    });\n  };\n};\nexport const authSignUp = (username, email, password1, password2) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios.post('http://127.0.0.1:8000/rest-auth/registration/', {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2\n    }).then(res => {\n      const token = res.data.key;\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('token', token);\n      localStorage.setItem('expirationDate', expirationDate);\n      dispatch(authSuccess());\n      dispatch(checkAuthTimeOut(3600));\n    }).catch(err => {\n      dispatch(authFail(err));\n    });\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (token === undefined) {\n      dispatch(logOut());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logOut());\n      } else {\n        dispatch(authSuccess(token));\n        dispatch(checkAuthTimeOut(expirationDate.getTime() - new Date().getTime() / 1000));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/gayathrinannapaneni/Desktop/Fullstack/python/djreact/frontend/gui/src/store/actions/auth.js"],"names":["axios","actionTypes","authStart","type","AUTH_START","authSuccess","token","AUTH_SUCCESS","authFail","error","AUTH_FAIL","logOut","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeOut","expirationTime","dispatch","setTimeout","authLogin","username","password","post","then","res","data","key","expirationDate","Date","getTime","setItem","catch","err","authSignUp","email","password1","password2","authCheckState","getItem","undefined"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport * as actionTypes from './actionTypes';\n\nexport const authStart = () => {\n    return{\n        type:actionTypes.AUTH_START\n    }\n}\n\nexport const authSuccess = token => {\n    return{\n        type:actionTypes.AUTH_SUCCESS,\n        token:token\n    }\n}\n\nexport const authFail = error => {\n    return{\n        type:actionTypes.AUTH_FAIL,\n        error:error\n    }\n}\n\nexport const logOut = () => {\n    localStorage.removeItem('user');\n    localStorage.removeItem('expirationDate')\n    return{\n        type:actionTypes.AUTH_LOGOUT\n    }\n}\n\nexport const checkAuthTimeOut = expirationTime => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logOut())\n        }, expirationTime * 1000)\n    }\n}\n\nexport const authLogin = (username, password) => {\n    return dispatch => {\n        dispatch(authStart());\n        axios.post('http://127.0.0.1:8000/rest-auth/login/', {\n            username:username,\n            password:password\n        })\n        .then(res=> {\n            const token = res.data.key\n            const expirationDate = new Date(new Date(). getTime() +3600 *1000)\n            localStorage.setItem('token', token);\n            localStorage.setItem('expirationDate', expirationDate);\n            dispatch(authSuccess());\n            dispatch(checkAuthTimeOut(3600))\n        })\n        .catch(err=>{\n            dispatch(authFail(err))\n        })\n    }\n}\n\nexport const authSignUp = (username, email, password1, password2) => {\n    return dispatch => {\n        dispatch(authStart());\n        axios.post('http://127.0.0.1:8000/rest-auth/registration/', {\n            username:username,\n            email:email,\n            password1:password1,\n            password2:password2\n        })\n        .then(res=> {\n            const token = res.data.key\n            const expirationDate = new Date(new Date(). getTime() +3600 *1000)\n            localStorage.setItem('token', token);\n            localStorage.setItem('expirationDate', expirationDate);\n            dispatch(authSuccess());\n            dispatch(checkAuthTimeOut(3600))\n        })\n        .catch(err=>{\n            dispatch(authFail(err))\n        })\n    }\n}\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token');\n        if(token === undefined){\n            dispatch(logOut());\n        } else {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'))\n            if(expirationDate <= new Date()) {\n                dispatch(logOut());\n            } else {\n                dispatch(authSuccess(token))\n                dispatch(checkAuthTimeOut(expirationDate.getTime()-new Date().getTime()/1000));\n            }\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}